// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/secrets/ent/namespacesecret"
	"github.com/direktiv/direktiv/pkg/secrets/ent/predicate"
)

// NamespaceSecretDelete is the builder for deleting a NamespaceSecret entity.
type NamespaceSecretDelete struct {
	config
	hooks    []Hook
	mutation *NamespaceSecretMutation
}

// Where appends a list predicates to the NamespaceSecretDelete builder.
func (nsd *NamespaceSecretDelete) Where(ps ...predicate.NamespaceSecret) *NamespaceSecretDelete {
	nsd.mutation.Where(ps...)
	return nsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nsd *NamespaceSecretDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, NamespaceSecretMutation](ctx, nsd.sqlExec, nsd.mutation, nsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nsd *NamespaceSecretDelete) ExecX(ctx context.Context) int {
	n, err := nsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nsd *NamespaceSecretDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(namespacesecret.Table, sqlgraph.NewFieldSpec(namespacesecret.FieldID, field.TypeInt))
	if ps := nsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nsd.mutation.done = true
	return affected, err
}

// NamespaceSecretDeleteOne is the builder for deleting a single NamespaceSecret entity.
type NamespaceSecretDeleteOne struct {
	nsd *NamespaceSecretDelete
}

// Where appends a list predicates to the NamespaceSecretDelete builder.
func (nsdo *NamespaceSecretDeleteOne) Where(ps ...predicate.NamespaceSecret) *NamespaceSecretDeleteOne {
	nsdo.nsd.mutation.Where(ps...)
	return nsdo
}

// Exec executes the deletion query.
func (nsdo *NamespaceSecretDeleteOne) Exec(ctx context.Context) error {
	n, err := nsdo.nsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{namespacesecret.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nsdo *NamespaceSecretDeleteOne) ExecX(ctx context.Context) {
	if err := nsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
