// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pkg/functions/grpc/protocol.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FunctionsService_StoreRegistry_FullMethodName       = "/direktiv_functions.FunctionsService/StoreRegistry"
	FunctionsService_GetRegistries_FullMethodName       = "/direktiv_functions.FunctionsService/GetRegistries"
	FunctionsService_DeleteRegistry_FullMethodName      = "/direktiv_functions.FunctionsService/DeleteRegistry"
	FunctionsService_ReconstructFunction_FullMethodName = "/direktiv_functions.FunctionsService/ReconstructFunction"
	FunctionsService_UpdateFunction_FullMethodName      = "/direktiv_functions.FunctionsService/UpdateFunction"
	FunctionsService_CreateFunction_FullMethodName      = "/direktiv_functions.FunctionsService/CreateFunction"
	FunctionsService_DeleteFunctions_FullMethodName     = "/direktiv_functions.FunctionsService/DeleteFunctions"
	FunctionsService_ListFunctions_FullMethodName       = "/direktiv_functions.FunctionsService/ListFunctions"
	FunctionsService_GetFunction_FullMethodName         = "/direktiv_functions.FunctionsService/GetFunction"
	FunctionsService_DeleteFunction_FullMethodName      = "/direktiv_functions.FunctionsService/DeleteFunction"
	FunctionsService_DeleteRevision_FullMethodName      = "/direktiv_functions.FunctionsService/DeleteRevision"
	FunctionsService_WatchFunctions_FullMethodName      = "/direktiv_functions.FunctionsService/WatchFunctions"
	FunctionsService_WatchPods_FullMethodName           = "/direktiv_functions.FunctionsService/WatchPods"
	FunctionsService_WatchRevisions_FullMethodName      = "/direktiv_functions.FunctionsService/WatchRevisions"
	FunctionsService_WatchLogs_FullMethodName           = "/direktiv_functions.FunctionsService/WatchLogs"
	FunctionsService_ListPods_FullMethodName            = "/direktiv_functions.FunctionsService/ListPods"
	FunctionsService_Build_FullMethodName               = "/direktiv_functions.FunctionsService/Build"
	FunctionsService_CancelWorfklow_FullMethodName      = "/direktiv_functions.FunctionsService/CancelWorfklow"
)

// FunctionsServiceClient is the client API for FunctionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionsServiceClient interface {
	StoreRegistry(ctx context.Context, in *FunctionsStoreRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRegistries(ctx context.Context, in *FunctionsGetRegistriesRequest, opts ...grpc.CallOption) (*FunctionsGetRegistriesResponse, error)
	DeleteRegistry(ctx context.Context, in *FunctionsDeleteRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReconstructFunction(ctx context.Context, in *FunctionsReconstructFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFunction(ctx context.Context, in *FunctionsUpdateFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateFunction(ctx context.Context, in *FunctionsCreateFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFunctions(ctx context.Context, in *FunctionsListFunctionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListFunctions(ctx context.Context, in *FunctionsListFunctionsRequest, opts ...grpc.CallOption) (*FunctionsListFunctionsResponse, error)
	GetFunction(ctx context.Context, in *FunctionsGetFunctionRequest, opts ...grpc.CallOption) (*FunctionsGetFunctionResponse, error)
	DeleteFunction(ctx context.Context, in *FunctionsGetFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRevision(ctx context.Context, in *FunctionsDeleteRevisionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WatchFunctions(ctx context.Context, in *FunctionsWatchFunctionsRequest, opts ...grpc.CallOption) (FunctionsService_WatchFunctionsClient, error)
	WatchPods(ctx context.Context, in *FunctionsWatchPodsRequest, opts ...grpc.CallOption) (FunctionsService_WatchPodsClient, error)
	WatchRevisions(ctx context.Context, in *FunctionsWatchRevisionsRequest, opts ...grpc.CallOption) (FunctionsService_WatchRevisionsClient, error)
	WatchLogs(ctx context.Context, in *FunctionsWatchLogsRequest, opts ...grpc.CallOption) (FunctionsService_WatchLogsClient, error)
	ListPods(ctx context.Context, in *FunctionsListPodsRequest, opts ...grpc.CallOption) (*FunctionsListPodsResponse, error)
	Build(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionsBuildResponse, error)
	CancelWorfklow(ctx context.Context, in *FunctionsCancelWorkflowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type functionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionsServiceClient(cc grpc.ClientConnInterface) FunctionsServiceClient {
	return &functionsServiceClient{cc}
}

func (c *functionsServiceClient) StoreRegistry(ctx context.Context, in *FunctionsStoreRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FunctionsService_StoreRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) GetRegistries(ctx context.Context, in *FunctionsGetRegistriesRequest, opts ...grpc.CallOption) (*FunctionsGetRegistriesResponse, error) {
	out := new(FunctionsGetRegistriesResponse)
	err := c.cc.Invoke(ctx, FunctionsService_GetRegistries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) DeleteRegistry(ctx context.Context, in *FunctionsDeleteRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FunctionsService_DeleteRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) ReconstructFunction(ctx context.Context, in *FunctionsReconstructFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FunctionsService_ReconstructFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) UpdateFunction(ctx context.Context, in *FunctionsUpdateFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FunctionsService_UpdateFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) CreateFunction(ctx context.Context, in *FunctionsCreateFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FunctionsService_CreateFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) DeleteFunctions(ctx context.Context, in *FunctionsListFunctionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FunctionsService_DeleteFunctions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) ListFunctions(ctx context.Context, in *FunctionsListFunctionsRequest, opts ...grpc.CallOption) (*FunctionsListFunctionsResponse, error) {
	out := new(FunctionsListFunctionsResponse)
	err := c.cc.Invoke(ctx, FunctionsService_ListFunctions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) GetFunction(ctx context.Context, in *FunctionsGetFunctionRequest, opts ...grpc.CallOption) (*FunctionsGetFunctionResponse, error) {
	out := new(FunctionsGetFunctionResponse)
	err := c.cc.Invoke(ctx, FunctionsService_GetFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) DeleteFunction(ctx context.Context, in *FunctionsGetFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FunctionsService_DeleteFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) DeleteRevision(ctx context.Context, in *FunctionsDeleteRevisionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FunctionsService_DeleteRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) WatchFunctions(ctx context.Context, in *FunctionsWatchFunctionsRequest, opts ...grpc.CallOption) (FunctionsService_WatchFunctionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FunctionsService_ServiceDesc.Streams[0], FunctionsService_WatchFunctions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &functionsServiceWatchFunctionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FunctionsService_WatchFunctionsClient interface {
	Recv() (*FunctionsWatchFunctionsResponse, error)
	grpc.ClientStream
}

type functionsServiceWatchFunctionsClient struct {
	grpc.ClientStream
}

func (x *functionsServiceWatchFunctionsClient) Recv() (*FunctionsWatchFunctionsResponse, error) {
	m := new(FunctionsWatchFunctionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *functionsServiceClient) WatchPods(ctx context.Context, in *FunctionsWatchPodsRequest, opts ...grpc.CallOption) (FunctionsService_WatchPodsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FunctionsService_ServiceDesc.Streams[1], FunctionsService_WatchPods_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &functionsServiceWatchPodsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FunctionsService_WatchPodsClient interface {
	Recv() (*FunctionsWatchPodsResponse, error)
	grpc.ClientStream
}

type functionsServiceWatchPodsClient struct {
	grpc.ClientStream
}

func (x *functionsServiceWatchPodsClient) Recv() (*FunctionsWatchPodsResponse, error) {
	m := new(FunctionsWatchPodsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *functionsServiceClient) WatchRevisions(ctx context.Context, in *FunctionsWatchRevisionsRequest, opts ...grpc.CallOption) (FunctionsService_WatchRevisionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FunctionsService_ServiceDesc.Streams[2], FunctionsService_WatchRevisions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &functionsServiceWatchRevisionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FunctionsService_WatchRevisionsClient interface {
	Recv() (*FunctionsWatchRevisionsResponse, error)
	grpc.ClientStream
}

type functionsServiceWatchRevisionsClient struct {
	grpc.ClientStream
}

func (x *functionsServiceWatchRevisionsClient) Recv() (*FunctionsWatchRevisionsResponse, error) {
	m := new(FunctionsWatchRevisionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *functionsServiceClient) WatchLogs(ctx context.Context, in *FunctionsWatchLogsRequest, opts ...grpc.CallOption) (FunctionsService_WatchLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FunctionsService_ServiceDesc.Streams[3], FunctionsService_WatchLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &functionsServiceWatchLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FunctionsService_WatchLogsClient interface {
	Recv() (*FunctionsWatchLogsResponse, error)
	grpc.ClientStream
}

type functionsServiceWatchLogsClient struct {
	grpc.ClientStream
}

func (x *functionsServiceWatchLogsClient) Recv() (*FunctionsWatchLogsResponse, error) {
	m := new(FunctionsWatchLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *functionsServiceClient) ListPods(ctx context.Context, in *FunctionsListPodsRequest, opts ...grpc.CallOption) (*FunctionsListPodsResponse, error) {
	out := new(FunctionsListPodsResponse)
	err := c.cc.Invoke(ctx, FunctionsService_ListPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) Build(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionsBuildResponse, error) {
	out := new(FunctionsBuildResponse)
	err := c.cc.Invoke(ctx, FunctionsService_Build_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsServiceClient) CancelWorfklow(ctx context.Context, in *FunctionsCancelWorkflowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FunctionsService_CancelWorfklow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionsServiceServer is the server API for FunctionsService service.
// All implementations must embed UnimplementedFunctionsServiceServer
// for forward compatibility
type FunctionsServiceServer interface {
	StoreRegistry(context.Context, *FunctionsStoreRegistryRequest) (*emptypb.Empty, error)
	GetRegistries(context.Context, *FunctionsGetRegistriesRequest) (*FunctionsGetRegistriesResponse, error)
	DeleteRegistry(context.Context, *FunctionsDeleteRegistryRequest) (*emptypb.Empty, error)
	ReconstructFunction(context.Context, *FunctionsReconstructFunctionRequest) (*emptypb.Empty, error)
	UpdateFunction(context.Context, *FunctionsUpdateFunctionRequest) (*emptypb.Empty, error)
	CreateFunction(context.Context, *FunctionsCreateFunctionRequest) (*emptypb.Empty, error)
	DeleteFunctions(context.Context, *FunctionsListFunctionsRequest) (*emptypb.Empty, error)
	ListFunctions(context.Context, *FunctionsListFunctionsRequest) (*FunctionsListFunctionsResponse, error)
	GetFunction(context.Context, *FunctionsGetFunctionRequest) (*FunctionsGetFunctionResponse, error)
	DeleteFunction(context.Context, *FunctionsGetFunctionRequest) (*emptypb.Empty, error)
	DeleteRevision(context.Context, *FunctionsDeleteRevisionRequest) (*emptypb.Empty, error)
	WatchFunctions(*FunctionsWatchFunctionsRequest, FunctionsService_WatchFunctionsServer) error
	WatchPods(*FunctionsWatchPodsRequest, FunctionsService_WatchPodsServer) error
	WatchRevisions(*FunctionsWatchRevisionsRequest, FunctionsService_WatchRevisionsServer) error
	WatchLogs(*FunctionsWatchLogsRequest, FunctionsService_WatchLogsServer) error
	ListPods(context.Context, *FunctionsListPodsRequest) (*FunctionsListPodsResponse, error)
	Build(context.Context, *emptypb.Empty) (*FunctionsBuildResponse, error)
	CancelWorfklow(context.Context, *FunctionsCancelWorkflowRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFunctionsServiceServer()
}

// UnimplementedFunctionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFunctionsServiceServer struct {
}

func (UnimplementedFunctionsServiceServer) StoreRegistry(context.Context, *FunctionsStoreRegistryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreRegistry not implemented")
}
func (UnimplementedFunctionsServiceServer) GetRegistries(context.Context, *FunctionsGetRegistriesRequest) (*FunctionsGetRegistriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistries not implemented")
}
func (UnimplementedFunctionsServiceServer) DeleteRegistry(context.Context, *FunctionsDeleteRegistryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistry not implemented")
}
func (UnimplementedFunctionsServiceServer) ReconstructFunction(context.Context, *FunctionsReconstructFunctionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconstructFunction not implemented")
}
func (UnimplementedFunctionsServiceServer) UpdateFunction(context.Context, *FunctionsUpdateFunctionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFunction not implemented")
}
func (UnimplementedFunctionsServiceServer) CreateFunction(context.Context, *FunctionsCreateFunctionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFunction not implemented")
}
func (UnimplementedFunctionsServiceServer) DeleteFunctions(context.Context, *FunctionsListFunctionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunctions not implemented")
}
func (UnimplementedFunctionsServiceServer) ListFunctions(context.Context, *FunctionsListFunctionsRequest) (*FunctionsListFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFunctions not implemented")
}
func (UnimplementedFunctionsServiceServer) GetFunction(context.Context, *FunctionsGetFunctionRequest) (*FunctionsGetFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunction not implemented")
}
func (UnimplementedFunctionsServiceServer) DeleteFunction(context.Context, *FunctionsGetFunctionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunction not implemented")
}
func (UnimplementedFunctionsServiceServer) DeleteRevision(context.Context, *FunctionsDeleteRevisionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRevision not implemented")
}
func (UnimplementedFunctionsServiceServer) WatchFunctions(*FunctionsWatchFunctionsRequest, FunctionsService_WatchFunctionsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchFunctions not implemented")
}
func (UnimplementedFunctionsServiceServer) WatchPods(*FunctionsWatchPodsRequest, FunctionsService_WatchPodsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPods not implemented")
}
func (UnimplementedFunctionsServiceServer) WatchRevisions(*FunctionsWatchRevisionsRequest, FunctionsService_WatchRevisionsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchRevisions not implemented")
}
func (UnimplementedFunctionsServiceServer) WatchLogs(*FunctionsWatchLogsRequest, FunctionsService_WatchLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchLogs not implemented")
}
func (UnimplementedFunctionsServiceServer) ListPods(context.Context, *FunctionsListPodsRequest) (*FunctionsListPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPods not implemented")
}
func (UnimplementedFunctionsServiceServer) Build(context.Context, *emptypb.Empty) (*FunctionsBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedFunctionsServiceServer) CancelWorfklow(context.Context, *FunctionsCancelWorkflowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWorfklow not implemented")
}
func (UnimplementedFunctionsServiceServer) mustEmbedUnimplementedFunctionsServiceServer() {}

// UnsafeFunctionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionsServiceServer will
// result in compilation errors.
type UnsafeFunctionsServiceServer interface {
	mustEmbedUnimplementedFunctionsServiceServer()
}

func RegisterFunctionsServiceServer(s grpc.ServiceRegistrar, srv FunctionsServiceServer) {
	s.RegisterService(&FunctionsService_ServiceDesc, srv)
}

func _FunctionsService_StoreRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsStoreRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).StoreRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_StoreRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).StoreRegistry(ctx, req.(*FunctionsStoreRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_GetRegistries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsGetRegistriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).GetRegistries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_GetRegistries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).GetRegistries(ctx, req.(*FunctionsGetRegistriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_DeleteRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsDeleteRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).DeleteRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_DeleteRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).DeleteRegistry(ctx, req.(*FunctionsDeleteRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_ReconstructFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsReconstructFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).ReconstructFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_ReconstructFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).ReconstructFunction(ctx, req.(*FunctionsReconstructFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_UpdateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsUpdateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).UpdateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_UpdateFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).UpdateFunction(ctx, req.(*FunctionsUpdateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_CreateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsCreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).CreateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_CreateFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).CreateFunction(ctx, req.(*FunctionsCreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_DeleteFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsListFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).DeleteFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_DeleteFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).DeleteFunctions(ctx, req.(*FunctionsListFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_ListFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsListFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).ListFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_ListFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).ListFunctions(ctx, req.(*FunctionsListFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_GetFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsGetFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).GetFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_GetFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).GetFunction(ctx, req.(*FunctionsGetFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_DeleteFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsGetFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).DeleteFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_DeleteFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).DeleteFunction(ctx, req.(*FunctionsGetFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_DeleteRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsDeleteRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).DeleteRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_DeleteRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).DeleteRevision(ctx, req.(*FunctionsDeleteRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_WatchFunctions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionsWatchFunctionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunctionsServiceServer).WatchFunctions(m, &functionsServiceWatchFunctionsServer{stream})
}

type FunctionsService_WatchFunctionsServer interface {
	Send(*FunctionsWatchFunctionsResponse) error
	grpc.ServerStream
}

type functionsServiceWatchFunctionsServer struct {
	grpc.ServerStream
}

func (x *functionsServiceWatchFunctionsServer) Send(m *FunctionsWatchFunctionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FunctionsService_WatchPods_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionsWatchPodsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunctionsServiceServer).WatchPods(m, &functionsServiceWatchPodsServer{stream})
}

type FunctionsService_WatchPodsServer interface {
	Send(*FunctionsWatchPodsResponse) error
	grpc.ServerStream
}

type functionsServiceWatchPodsServer struct {
	grpc.ServerStream
}

func (x *functionsServiceWatchPodsServer) Send(m *FunctionsWatchPodsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FunctionsService_WatchRevisions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionsWatchRevisionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunctionsServiceServer).WatchRevisions(m, &functionsServiceWatchRevisionsServer{stream})
}

type FunctionsService_WatchRevisionsServer interface {
	Send(*FunctionsWatchRevisionsResponse) error
	grpc.ServerStream
}

type functionsServiceWatchRevisionsServer struct {
	grpc.ServerStream
}

func (x *functionsServiceWatchRevisionsServer) Send(m *FunctionsWatchRevisionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FunctionsService_WatchLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionsWatchLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunctionsServiceServer).WatchLogs(m, &functionsServiceWatchLogsServer{stream})
}

type FunctionsService_WatchLogsServer interface {
	Send(*FunctionsWatchLogsResponse) error
	grpc.ServerStream
}

type functionsServiceWatchLogsServer struct {
	grpc.ServerStream
}

func (x *functionsServiceWatchLogsServer) Send(m *FunctionsWatchLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FunctionsService_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsListPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_ListPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).ListPods(ctx, req.(*FunctionsListPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_Build_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).Build(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionsService_CancelWorfklow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsCancelWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServiceServer).CancelWorfklow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionsService_CancelWorfklow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServiceServer).CancelWorfklow(ctx, req.(*FunctionsCancelWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FunctionsService_ServiceDesc is the grpc.ServiceDesc for FunctionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FunctionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "direktiv_functions.FunctionsService",
	HandlerType: (*FunctionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreRegistry",
			Handler:    _FunctionsService_StoreRegistry_Handler,
		},
		{
			MethodName: "GetRegistries",
			Handler:    _FunctionsService_GetRegistries_Handler,
		},
		{
			MethodName: "DeleteRegistry",
			Handler:    _FunctionsService_DeleteRegistry_Handler,
		},
		{
			MethodName: "ReconstructFunction",
			Handler:    _FunctionsService_ReconstructFunction_Handler,
		},
		{
			MethodName: "UpdateFunction",
			Handler:    _FunctionsService_UpdateFunction_Handler,
		},
		{
			MethodName: "CreateFunction",
			Handler:    _FunctionsService_CreateFunction_Handler,
		},
		{
			MethodName: "DeleteFunctions",
			Handler:    _FunctionsService_DeleteFunctions_Handler,
		},
		{
			MethodName: "ListFunctions",
			Handler:    _FunctionsService_ListFunctions_Handler,
		},
		{
			MethodName: "GetFunction",
			Handler:    _FunctionsService_GetFunction_Handler,
		},
		{
			MethodName: "DeleteFunction",
			Handler:    _FunctionsService_DeleteFunction_Handler,
		},
		{
			MethodName: "DeleteRevision",
			Handler:    _FunctionsService_DeleteRevision_Handler,
		},
		{
			MethodName: "ListPods",
			Handler:    _FunctionsService_ListPods_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _FunctionsService_Build_Handler,
		},
		{
			MethodName: "CancelWorfklow",
			Handler:    _FunctionsService_CancelWorfklow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchFunctions",
			Handler:       _FunctionsService_WatchFunctions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPods",
			Handler:       _FunctionsService_WatchPods_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchRevisions",
			Handler:       _FunctionsService_WatchRevisions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchLogs",
			Handler:       _FunctionsService_WatchLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/functions/grpc/protocol.proto",
}
