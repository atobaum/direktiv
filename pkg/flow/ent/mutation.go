// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/direktiv/direktiv/pkg/flow/ent/cloudeventfilters"
	"github.com/direktiv/direktiv/pkg/flow/ent/cloudevents"
	"github.com/direktiv/direktiv/pkg/flow/ent/events"
	"github.com/direktiv/direktiv/pkg/flow/ent/eventswait"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCloudEventFilters = "CloudEventFilters"
	TypeCloudEvents       = "CloudEvents"
	TypeEvents            = "Events"
	TypeEventsWait        = "EventsWait"
	TypeNamespace         = "Namespace"
)

// CloudEventFiltersMutation represents an operation that mutates the CloudEventFilters nodes in the graph.
type CloudEventFiltersMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	jscode           *string
	clearedFields    map[string]struct{}
	namespace        *uuid.UUID
	clearednamespace bool
	done             bool
	oldValue         func(context.Context) (*CloudEventFilters, error)
	predicates       []predicate.CloudEventFilters
}

var _ ent.Mutation = (*CloudEventFiltersMutation)(nil)

// cloudeventfiltersOption allows management of the mutation configuration using functional options.
type cloudeventfiltersOption func(*CloudEventFiltersMutation)

// newCloudEventFiltersMutation creates new mutation for the CloudEventFilters entity.
func newCloudEventFiltersMutation(c config, op Op, opts ...cloudeventfiltersOption) *CloudEventFiltersMutation {
	m := &CloudEventFiltersMutation{
		config:        c,
		op:            op,
		typ:           TypeCloudEventFilters,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCloudEventFiltersID sets the ID field of the mutation.
func withCloudEventFiltersID(id int) cloudeventfiltersOption {
	return func(m *CloudEventFiltersMutation) {
		var (
			err   error
			once  sync.Once
			value *CloudEventFilters
		)
		m.oldValue = func(ctx context.Context) (*CloudEventFilters, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CloudEventFilters.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCloudEventFilters sets the old CloudEventFilters of the mutation.
func withCloudEventFilters(node *CloudEventFilters) cloudeventfiltersOption {
	return func(m *CloudEventFiltersMutation) {
		m.oldValue = func(context.Context) (*CloudEventFilters, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CloudEventFiltersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CloudEventFiltersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CloudEventFiltersMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CloudEventFiltersMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CloudEventFilters.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CloudEventFiltersMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CloudEventFiltersMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CloudEventFilters entity.
// If the CloudEventFilters object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudEventFiltersMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CloudEventFiltersMutation) ResetName() {
	m.name = nil
}

// SetJscode sets the "jscode" field.
func (m *CloudEventFiltersMutation) SetJscode(s string) {
	m.jscode = &s
}

// Jscode returns the value of the "jscode" field in the mutation.
func (m *CloudEventFiltersMutation) Jscode() (r string, exists bool) {
	v := m.jscode
	if v == nil {
		return
	}
	return *v, true
}

// OldJscode returns the old "jscode" field's value of the CloudEventFilters entity.
// If the CloudEventFilters object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudEventFiltersMutation) OldJscode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJscode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJscode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJscode: %w", err)
	}
	return oldValue.Jscode, nil
}

// ResetJscode resets all changes to the "jscode" field.
func (m *CloudEventFiltersMutation) ResetJscode() {
	m.jscode = nil
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by id.
func (m *CloudEventFiltersMutation) SetNamespaceID(id uuid.UUID) {
	m.namespace = &id
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (m *CloudEventFiltersMutation) ClearNamespace() {
	m.clearednamespace = true
}

// NamespaceCleared reports if the "namespace" edge to the Namespace entity was cleared.
func (m *CloudEventFiltersMutation) NamespaceCleared() bool {
	return m.clearednamespace
}

// NamespaceID returns the "namespace" edge ID in the mutation.
func (m *CloudEventFiltersMutation) NamespaceID() (id uuid.UUID, exists bool) {
	if m.namespace != nil {
		return *m.namespace, true
	}
	return
}

// NamespaceIDs returns the "namespace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NamespaceID instead. It exists only for internal usage by the builders.
func (m *CloudEventFiltersMutation) NamespaceIDs() (ids []uuid.UUID) {
	if id := m.namespace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNamespace resets all changes to the "namespace" edge.
func (m *CloudEventFiltersMutation) ResetNamespace() {
	m.namespace = nil
	m.clearednamespace = false
}

// Where appends a list predicates to the CloudEventFiltersMutation builder.
func (m *CloudEventFiltersMutation) Where(ps ...predicate.CloudEventFilters) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CloudEventFiltersMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CloudEventFiltersMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CloudEventFilters, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CloudEventFiltersMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CloudEventFiltersMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CloudEventFilters).
func (m *CloudEventFiltersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CloudEventFiltersMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, cloudeventfilters.FieldName)
	}
	if m.jscode != nil {
		fields = append(fields, cloudeventfilters.FieldJscode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CloudEventFiltersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cloudeventfilters.FieldName:
		return m.Name()
	case cloudeventfilters.FieldJscode:
		return m.Jscode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CloudEventFiltersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cloudeventfilters.FieldName:
		return m.OldName(ctx)
	case cloudeventfilters.FieldJscode:
		return m.OldJscode(ctx)
	}
	return nil, fmt.Errorf("unknown CloudEventFilters field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CloudEventFiltersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cloudeventfilters.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case cloudeventfilters.FieldJscode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJscode(v)
		return nil
	}
	return fmt.Errorf("unknown CloudEventFilters field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CloudEventFiltersMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CloudEventFiltersMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CloudEventFiltersMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CloudEventFilters numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CloudEventFiltersMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CloudEventFiltersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CloudEventFiltersMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CloudEventFilters nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CloudEventFiltersMutation) ResetField(name string) error {
	switch name {
	case cloudeventfilters.FieldName:
		m.ResetName()
		return nil
	case cloudeventfilters.FieldJscode:
		m.ResetJscode()
		return nil
	}
	return fmt.Errorf("unknown CloudEventFilters field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CloudEventFiltersMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.namespace != nil {
		edges = append(edges, cloudeventfilters.EdgeNamespace)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CloudEventFiltersMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cloudeventfilters.EdgeNamespace:
		if id := m.namespace; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CloudEventFiltersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CloudEventFiltersMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CloudEventFiltersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednamespace {
		edges = append(edges, cloudeventfilters.EdgeNamespace)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CloudEventFiltersMutation) EdgeCleared(name string) bool {
	switch name {
	case cloudeventfilters.EdgeNamespace:
		return m.clearednamespace
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CloudEventFiltersMutation) ClearEdge(name string) error {
	switch name {
	case cloudeventfilters.EdgeNamespace:
		m.ClearNamespace()
		return nil
	}
	return fmt.Errorf("unknown CloudEventFilters unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CloudEventFiltersMutation) ResetEdge(name string) error {
	switch name {
	case cloudeventfilters.EdgeNamespace:
		m.ResetNamespace()
		return nil
	}
	return fmt.Errorf("unknown CloudEventFilters edge %s", name)
}

// CloudEventsMutation represents an operation that mutates the CloudEvents nodes in the graph.
type CloudEventsMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	eventId          *string
	event            *event.Event
	fire             *time.Time
	created          *time.Time
	processed        *bool
	clearedFields    map[string]struct{}
	namespace        *uuid.UUID
	clearednamespace bool
	done             bool
	oldValue         func(context.Context) (*CloudEvents, error)
	predicates       []predicate.CloudEvents
}

var _ ent.Mutation = (*CloudEventsMutation)(nil)

// cloudeventsOption allows management of the mutation configuration using functional options.
type cloudeventsOption func(*CloudEventsMutation)

// newCloudEventsMutation creates new mutation for the CloudEvents entity.
func newCloudEventsMutation(c config, op Op, opts ...cloudeventsOption) *CloudEventsMutation {
	m := &CloudEventsMutation{
		config:        c,
		op:            op,
		typ:           TypeCloudEvents,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCloudEventsID sets the ID field of the mutation.
func withCloudEventsID(id uuid.UUID) cloudeventsOption {
	return func(m *CloudEventsMutation) {
		var (
			err   error
			once  sync.Once
			value *CloudEvents
		)
		m.oldValue = func(ctx context.Context) (*CloudEvents, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CloudEvents.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCloudEvents sets the old CloudEvents of the mutation.
func withCloudEvents(node *CloudEvents) cloudeventsOption {
	return func(m *CloudEventsMutation) {
		m.oldValue = func(context.Context) (*CloudEvents, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CloudEventsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CloudEventsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CloudEvents entities.
func (m *CloudEventsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CloudEventsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CloudEventsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CloudEvents.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventId sets the "eventId" field.
func (m *CloudEventsMutation) SetEventId(s string) {
	m.eventId = &s
}

// EventId returns the value of the "eventId" field in the mutation.
func (m *CloudEventsMutation) EventId() (r string, exists bool) {
	v := m.eventId
	if v == nil {
		return
	}
	return *v, true
}

// OldEventId returns the old "eventId" field's value of the CloudEvents entity.
// If the CloudEvents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudEventsMutation) OldEventId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventId: %w", err)
	}
	return oldValue.EventId, nil
}

// ResetEventId resets all changes to the "eventId" field.
func (m *CloudEventsMutation) ResetEventId() {
	m.eventId = nil
}

// SetEvent sets the "event" field.
func (m *CloudEventsMutation) SetEvent(e event.Event) {
	m.event = &e
}

// Event returns the value of the "event" field in the mutation.
func (m *CloudEventsMutation) Event() (r event.Event, exists bool) {
	v := m.event
	if v == nil {
		return
	}
	return *v, true
}

// OldEvent returns the old "event" field's value of the CloudEvents entity.
// If the CloudEvents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudEventsMutation) OldEvent(ctx context.Context) (v event.Event, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvent: %w", err)
	}
	return oldValue.Event, nil
}

// ResetEvent resets all changes to the "event" field.
func (m *CloudEventsMutation) ResetEvent() {
	m.event = nil
}

// SetFire sets the "fire" field.
func (m *CloudEventsMutation) SetFire(t time.Time) {
	m.fire = &t
}

// Fire returns the value of the "fire" field in the mutation.
func (m *CloudEventsMutation) Fire() (r time.Time, exists bool) {
	v := m.fire
	if v == nil {
		return
	}
	return *v, true
}

// OldFire returns the old "fire" field's value of the CloudEvents entity.
// If the CloudEvents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudEventsMutation) OldFire(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFire is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFire requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFire: %w", err)
	}
	return oldValue.Fire, nil
}

// ResetFire resets all changes to the "fire" field.
func (m *CloudEventsMutation) ResetFire() {
	m.fire = nil
}

// SetCreated sets the "created" field.
func (m *CloudEventsMutation) SetCreated(t time.Time) {
	m.created = &t
}

// Created returns the value of the "created" field in the mutation.
func (m *CloudEventsMutation) Created() (r time.Time, exists bool) {
	v := m.created
	if v == nil {
		return
	}
	return *v, true
}

// OldCreated returns the old "created" field's value of the CloudEvents entity.
// If the CloudEvents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudEventsMutation) OldCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreated: %w", err)
	}
	return oldValue.Created, nil
}

// ResetCreated resets all changes to the "created" field.
func (m *CloudEventsMutation) ResetCreated() {
	m.created = nil
}

// SetProcessed sets the "processed" field.
func (m *CloudEventsMutation) SetProcessed(b bool) {
	m.processed = &b
}

// Processed returns the value of the "processed" field in the mutation.
func (m *CloudEventsMutation) Processed() (r bool, exists bool) {
	v := m.processed
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessed returns the old "processed" field's value of the CloudEvents entity.
// If the CloudEvents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudEventsMutation) OldProcessed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessed: %w", err)
	}
	return oldValue.Processed, nil
}

// ResetProcessed resets all changes to the "processed" field.
func (m *CloudEventsMutation) ResetProcessed() {
	m.processed = nil
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by id.
func (m *CloudEventsMutation) SetNamespaceID(id uuid.UUID) {
	m.namespace = &id
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (m *CloudEventsMutation) ClearNamespace() {
	m.clearednamespace = true
}

// NamespaceCleared reports if the "namespace" edge to the Namespace entity was cleared.
func (m *CloudEventsMutation) NamespaceCleared() bool {
	return m.clearednamespace
}

// NamespaceID returns the "namespace" edge ID in the mutation.
func (m *CloudEventsMutation) NamespaceID() (id uuid.UUID, exists bool) {
	if m.namespace != nil {
		return *m.namespace, true
	}
	return
}

// NamespaceIDs returns the "namespace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NamespaceID instead. It exists only for internal usage by the builders.
func (m *CloudEventsMutation) NamespaceIDs() (ids []uuid.UUID) {
	if id := m.namespace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNamespace resets all changes to the "namespace" edge.
func (m *CloudEventsMutation) ResetNamespace() {
	m.namespace = nil
	m.clearednamespace = false
}

// Where appends a list predicates to the CloudEventsMutation builder.
func (m *CloudEventsMutation) Where(ps ...predicate.CloudEvents) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CloudEventsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CloudEventsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CloudEvents, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CloudEventsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CloudEventsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CloudEvents).
func (m *CloudEventsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CloudEventsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.eventId != nil {
		fields = append(fields, cloudevents.FieldEventId)
	}
	if m.event != nil {
		fields = append(fields, cloudevents.FieldEvent)
	}
	if m.fire != nil {
		fields = append(fields, cloudevents.FieldFire)
	}
	if m.created != nil {
		fields = append(fields, cloudevents.FieldCreated)
	}
	if m.processed != nil {
		fields = append(fields, cloudevents.FieldProcessed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CloudEventsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cloudevents.FieldEventId:
		return m.EventId()
	case cloudevents.FieldEvent:
		return m.Event()
	case cloudevents.FieldFire:
		return m.Fire()
	case cloudevents.FieldCreated:
		return m.Created()
	case cloudevents.FieldProcessed:
		return m.Processed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CloudEventsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cloudevents.FieldEventId:
		return m.OldEventId(ctx)
	case cloudevents.FieldEvent:
		return m.OldEvent(ctx)
	case cloudevents.FieldFire:
		return m.OldFire(ctx)
	case cloudevents.FieldCreated:
		return m.OldCreated(ctx)
	case cloudevents.FieldProcessed:
		return m.OldProcessed(ctx)
	}
	return nil, fmt.Errorf("unknown CloudEvents field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CloudEventsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cloudevents.FieldEventId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventId(v)
		return nil
	case cloudevents.FieldEvent:
		v, ok := value.(event.Event)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvent(v)
		return nil
	case cloudevents.FieldFire:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFire(v)
		return nil
	case cloudevents.FieldCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreated(v)
		return nil
	case cloudevents.FieldProcessed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessed(v)
		return nil
	}
	return fmt.Errorf("unknown CloudEvents field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CloudEventsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CloudEventsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CloudEventsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CloudEvents numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CloudEventsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CloudEventsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CloudEventsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CloudEvents nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CloudEventsMutation) ResetField(name string) error {
	switch name {
	case cloudevents.FieldEventId:
		m.ResetEventId()
		return nil
	case cloudevents.FieldEvent:
		m.ResetEvent()
		return nil
	case cloudevents.FieldFire:
		m.ResetFire()
		return nil
	case cloudevents.FieldCreated:
		m.ResetCreated()
		return nil
	case cloudevents.FieldProcessed:
		m.ResetProcessed()
		return nil
	}
	return fmt.Errorf("unknown CloudEvents field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CloudEventsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.namespace != nil {
		edges = append(edges, cloudevents.EdgeNamespace)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CloudEventsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cloudevents.EdgeNamespace:
		if id := m.namespace; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CloudEventsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CloudEventsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CloudEventsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednamespace {
		edges = append(edges, cloudevents.EdgeNamespace)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CloudEventsMutation) EdgeCleared(name string) bool {
	switch name {
	case cloudevents.EdgeNamespace:
		return m.clearednamespace
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CloudEventsMutation) ClearEdge(name string) error {
	switch name {
	case cloudevents.EdgeNamespace:
		m.ClearNamespace()
		return nil
	}
	return fmt.Errorf("unknown CloudEvents unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CloudEventsMutation) ResetEdge(name string) error {
	switch name {
	case cloudevents.EdgeNamespace:
		m.ResetNamespace()
		return nil
	}
	return fmt.Errorf("unknown CloudEvents edge %s", name)
}

// EventsMutation represents an operation that mutates the Events nodes in the graph.
type EventsMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	events              *[]map[string]interface{}
	appendevents        []map[string]interface{}
	correlations        *[]string
	appendcorrelations  []string
	signature           *[]byte
	count               *int
	addcount            *int
	created_at          *time.Time
	updated_at          *time.Time
	workflow_id         *uuid.UUID
	instance_id         *uuid.UUID
	clearedFields       map[string]struct{}
	wfeventswait        map[uuid.UUID]struct{}
	removedwfeventswait map[uuid.UUID]struct{}
	clearedwfeventswait bool
	namespace           *uuid.UUID
	clearednamespace    bool
	done                bool
	oldValue            func(context.Context) (*Events, error)
	predicates          []predicate.Events
}

var _ ent.Mutation = (*EventsMutation)(nil)

// eventsOption allows management of the mutation configuration using functional options.
type eventsOption func(*EventsMutation)

// newEventsMutation creates new mutation for the Events entity.
func newEventsMutation(c config, op Op, opts ...eventsOption) *EventsMutation {
	m := &EventsMutation{
		config:        c,
		op:            op,
		typ:           TypeEvents,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventsID sets the ID field of the mutation.
func withEventsID(id uuid.UUID) eventsOption {
	return func(m *EventsMutation) {
		var (
			err   error
			once  sync.Once
			value *Events
		)
		m.oldValue = func(ctx context.Context) (*Events, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Events.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvents sets the old Events of the mutation.
func withEvents(node *Events) eventsOption {
	return func(m *EventsMutation) {
		m.oldValue = func(context.Context) (*Events, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Events entities.
func (m *EventsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Events.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEvents sets the "events" field.
func (m *EventsMutation) SetEvents(value []map[string]interface{}) {
	m.events = &value
	m.appendevents = nil
}

// Events returns the value of the "events" field in the mutation.
func (m *EventsMutation) Events() (r []map[string]interface{}, exists bool) {
	v := m.events
	if v == nil {
		return
	}
	return *v, true
}

// OldEvents returns the old "events" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldEvents(ctx context.Context) (v []map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvents is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvents requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvents: %w", err)
	}
	return oldValue.Events, nil
}

// AppendEvents adds value to the "events" field.
func (m *EventsMutation) AppendEvents(value []map[string]interface{}) {
	m.appendevents = append(m.appendevents, value...)
}

// AppendedEvents returns the list of values that were appended to the "events" field in this mutation.
func (m *EventsMutation) AppendedEvents() ([]map[string]interface{}, bool) {
	if len(m.appendevents) == 0 {
		return nil, false
	}
	return m.appendevents, true
}

// ResetEvents resets all changes to the "events" field.
func (m *EventsMutation) ResetEvents() {
	m.events = nil
	m.appendevents = nil
}

// SetCorrelations sets the "correlations" field.
func (m *EventsMutation) SetCorrelations(s []string) {
	m.correlations = &s
	m.appendcorrelations = nil
}

// Correlations returns the value of the "correlations" field in the mutation.
func (m *EventsMutation) Correlations() (r []string, exists bool) {
	v := m.correlations
	if v == nil {
		return
	}
	return *v, true
}

// OldCorrelations returns the old "correlations" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldCorrelations(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCorrelations is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCorrelations requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCorrelations: %w", err)
	}
	return oldValue.Correlations, nil
}

// AppendCorrelations adds s to the "correlations" field.
func (m *EventsMutation) AppendCorrelations(s []string) {
	m.appendcorrelations = append(m.appendcorrelations, s...)
}

// AppendedCorrelations returns the list of values that were appended to the "correlations" field in this mutation.
func (m *EventsMutation) AppendedCorrelations() ([]string, bool) {
	if len(m.appendcorrelations) == 0 {
		return nil, false
	}
	return m.appendcorrelations, true
}

// ResetCorrelations resets all changes to the "correlations" field.
func (m *EventsMutation) ResetCorrelations() {
	m.correlations = nil
	m.appendcorrelations = nil
}

// SetSignature sets the "signature" field.
func (m *EventsMutation) SetSignature(b []byte) {
	m.signature = &b
}

// Signature returns the value of the "signature" field in the mutation.
func (m *EventsMutation) Signature() (r []byte, exists bool) {
	v := m.signature
	if v == nil {
		return
	}
	return *v, true
}

// OldSignature returns the old "signature" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldSignature(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignature: %w", err)
	}
	return oldValue.Signature, nil
}

// ClearSignature clears the value of the "signature" field.
func (m *EventsMutation) ClearSignature() {
	m.signature = nil
	m.clearedFields[events.FieldSignature] = struct{}{}
}

// SignatureCleared returns if the "signature" field was cleared in this mutation.
func (m *EventsMutation) SignatureCleared() bool {
	_, ok := m.clearedFields[events.FieldSignature]
	return ok
}

// ResetSignature resets all changes to the "signature" field.
func (m *EventsMutation) ResetSignature() {
	m.signature = nil
	delete(m.clearedFields, events.FieldSignature)
}

// SetCount sets the "count" field.
func (m *EventsMutation) SetCount(i int) {
	m.count = &i
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *EventsMutation) Count() (r int, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds i to the "count" field.
func (m *EventsMutation) AddCount(i int) {
	if m.addcount != nil {
		*m.addcount += i
	} else {
		m.addcount = &i
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *EventsMutation) AddedCount() (r int, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "count" field.
func (m *EventsMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EventsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EventsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EventsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EventsMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EventsMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EventsMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetWorkflowID sets the "workflow_id" field.
func (m *EventsMutation) SetWorkflowID(u uuid.UUID) {
	m.workflow_id = &u
}

// WorkflowID returns the value of the "workflow_id" field in the mutation.
func (m *EventsMutation) WorkflowID() (r uuid.UUID, exists bool) {
	v := m.workflow_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkflowID returns the old "workflow_id" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldWorkflowID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkflowID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkflowID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkflowID: %w", err)
	}
	return oldValue.WorkflowID, nil
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (m *EventsMutation) ClearWorkflowID() {
	m.workflow_id = nil
	m.clearedFields[events.FieldWorkflowID] = struct{}{}
}

// WorkflowIDCleared returns if the "workflow_id" field was cleared in this mutation.
func (m *EventsMutation) WorkflowIDCleared() bool {
	_, ok := m.clearedFields[events.FieldWorkflowID]
	return ok
}

// ResetWorkflowID resets all changes to the "workflow_id" field.
func (m *EventsMutation) ResetWorkflowID() {
	m.workflow_id = nil
	delete(m.clearedFields, events.FieldWorkflowID)
}

// SetInstanceID sets the "instance_id" field.
func (m *EventsMutation) SetInstanceID(u uuid.UUID) {
	m.instance_id = &u
}

// InstanceID returns the value of the "instance_id" field in the mutation.
func (m *EventsMutation) InstanceID() (r uuid.UUID, exists bool) {
	v := m.instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceID returns the old "instance_id" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldInstanceID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceID: %w", err)
	}
	return oldValue.InstanceID, nil
}

// ClearInstanceID clears the value of the "instance_id" field.
func (m *EventsMutation) ClearInstanceID() {
	m.instance_id = nil
	m.clearedFields[events.FieldInstanceID] = struct{}{}
}

// InstanceIDCleared returns if the "instance_id" field was cleared in this mutation.
func (m *EventsMutation) InstanceIDCleared() bool {
	_, ok := m.clearedFields[events.FieldInstanceID]
	return ok
}

// ResetInstanceID resets all changes to the "instance_id" field.
func (m *EventsMutation) ResetInstanceID() {
	m.instance_id = nil
	delete(m.clearedFields, events.FieldInstanceID)
}

// AddWfeventswaitIDs adds the "wfeventswait" edge to the EventsWait entity by ids.
func (m *EventsMutation) AddWfeventswaitIDs(ids ...uuid.UUID) {
	if m.wfeventswait == nil {
		m.wfeventswait = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.wfeventswait[ids[i]] = struct{}{}
	}
}

// ClearWfeventswait clears the "wfeventswait" edge to the EventsWait entity.
func (m *EventsMutation) ClearWfeventswait() {
	m.clearedwfeventswait = true
}

// WfeventswaitCleared reports if the "wfeventswait" edge to the EventsWait entity was cleared.
func (m *EventsMutation) WfeventswaitCleared() bool {
	return m.clearedwfeventswait
}

// RemoveWfeventswaitIDs removes the "wfeventswait" edge to the EventsWait entity by IDs.
func (m *EventsMutation) RemoveWfeventswaitIDs(ids ...uuid.UUID) {
	if m.removedwfeventswait == nil {
		m.removedwfeventswait = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.wfeventswait, ids[i])
		m.removedwfeventswait[ids[i]] = struct{}{}
	}
}

// RemovedWfeventswait returns the removed IDs of the "wfeventswait" edge to the EventsWait entity.
func (m *EventsMutation) RemovedWfeventswaitIDs() (ids []uuid.UUID) {
	for id := range m.removedwfeventswait {
		ids = append(ids, id)
	}
	return
}

// WfeventswaitIDs returns the "wfeventswait" edge IDs in the mutation.
func (m *EventsMutation) WfeventswaitIDs() (ids []uuid.UUID) {
	for id := range m.wfeventswait {
		ids = append(ids, id)
	}
	return
}

// ResetWfeventswait resets all changes to the "wfeventswait" edge.
func (m *EventsMutation) ResetWfeventswait() {
	m.wfeventswait = nil
	m.clearedwfeventswait = false
	m.removedwfeventswait = nil
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by id.
func (m *EventsMutation) SetNamespaceID(id uuid.UUID) {
	m.namespace = &id
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (m *EventsMutation) ClearNamespace() {
	m.clearednamespace = true
}

// NamespaceCleared reports if the "namespace" edge to the Namespace entity was cleared.
func (m *EventsMutation) NamespaceCleared() bool {
	return m.clearednamespace
}

// NamespaceID returns the "namespace" edge ID in the mutation.
func (m *EventsMutation) NamespaceID() (id uuid.UUID, exists bool) {
	if m.namespace != nil {
		return *m.namespace, true
	}
	return
}

// NamespaceIDs returns the "namespace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NamespaceID instead. It exists only for internal usage by the builders.
func (m *EventsMutation) NamespaceIDs() (ids []uuid.UUID) {
	if id := m.namespace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNamespace resets all changes to the "namespace" edge.
func (m *EventsMutation) ResetNamespace() {
	m.namespace = nil
	m.clearednamespace = false
}

// Where appends a list predicates to the EventsMutation builder.
func (m *EventsMutation) Where(ps ...predicate.Events) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Events, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Events).
func (m *EventsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventsMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.events != nil {
		fields = append(fields, events.FieldEvents)
	}
	if m.correlations != nil {
		fields = append(fields, events.FieldCorrelations)
	}
	if m.signature != nil {
		fields = append(fields, events.FieldSignature)
	}
	if m.count != nil {
		fields = append(fields, events.FieldCount)
	}
	if m.created_at != nil {
		fields = append(fields, events.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, events.FieldUpdatedAt)
	}
	if m.workflow_id != nil {
		fields = append(fields, events.FieldWorkflowID)
	}
	if m.instance_id != nil {
		fields = append(fields, events.FieldInstanceID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case events.FieldEvents:
		return m.Events()
	case events.FieldCorrelations:
		return m.Correlations()
	case events.FieldSignature:
		return m.Signature()
	case events.FieldCount:
		return m.Count()
	case events.FieldCreatedAt:
		return m.CreatedAt()
	case events.FieldUpdatedAt:
		return m.UpdatedAt()
	case events.FieldWorkflowID:
		return m.WorkflowID()
	case events.FieldInstanceID:
		return m.InstanceID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case events.FieldEvents:
		return m.OldEvents(ctx)
	case events.FieldCorrelations:
		return m.OldCorrelations(ctx)
	case events.FieldSignature:
		return m.OldSignature(ctx)
	case events.FieldCount:
		return m.OldCount(ctx)
	case events.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case events.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case events.FieldWorkflowID:
		return m.OldWorkflowID(ctx)
	case events.FieldInstanceID:
		return m.OldInstanceID(ctx)
	}
	return nil, fmt.Errorf("unknown Events field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case events.FieldEvents:
		v, ok := value.([]map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvents(v)
		return nil
	case events.FieldCorrelations:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCorrelations(v)
		return nil
	case events.FieldSignature:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignature(v)
		return nil
	case events.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	case events.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case events.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case events.FieldWorkflowID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkflowID(v)
		return nil
	case events.FieldInstanceID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceID(v)
		return nil
	}
	return fmt.Errorf("unknown Events field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventsMutation) AddedFields() []string {
	var fields []string
	if m.addcount != nil {
		fields = append(fields, events.FieldCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case events.FieldCount:
		return m.AddedCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case events.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	}
	return fmt.Errorf("unknown Events numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(events.FieldSignature) {
		fields = append(fields, events.FieldSignature)
	}
	if m.FieldCleared(events.FieldWorkflowID) {
		fields = append(fields, events.FieldWorkflowID)
	}
	if m.FieldCleared(events.FieldInstanceID) {
		fields = append(fields, events.FieldInstanceID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventsMutation) ClearField(name string) error {
	switch name {
	case events.FieldSignature:
		m.ClearSignature()
		return nil
	case events.FieldWorkflowID:
		m.ClearWorkflowID()
		return nil
	case events.FieldInstanceID:
		m.ClearInstanceID()
		return nil
	}
	return fmt.Errorf("unknown Events nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventsMutation) ResetField(name string) error {
	switch name {
	case events.FieldEvents:
		m.ResetEvents()
		return nil
	case events.FieldCorrelations:
		m.ResetCorrelations()
		return nil
	case events.FieldSignature:
		m.ResetSignature()
		return nil
	case events.FieldCount:
		m.ResetCount()
		return nil
	case events.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case events.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case events.FieldWorkflowID:
		m.ResetWorkflowID()
		return nil
	case events.FieldInstanceID:
		m.ResetInstanceID()
		return nil
	}
	return fmt.Errorf("unknown Events field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.wfeventswait != nil {
		edges = append(edges, events.EdgeWfeventswait)
	}
	if m.namespace != nil {
		edges = append(edges, events.EdgeNamespace)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case events.EdgeWfeventswait:
		ids := make([]ent.Value, 0, len(m.wfeventswait))
		for id := range m.wfeventswait {
			ids = append(ids, id)
		}
		return ids
	case events.EdgeNamespace:
		if id := m.namespace; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedwfeventswait != nil {
		edges = append(edges, events.EdgeWfeventswait)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case events.EdgeWfeventswait:
		ids := make([]ent.Value, 0, len(m.removedwfeventswait))
		for id := range m.removedwfeventswait {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedwfeventswait {
		edges = append(edges, events.EdgeWfeventswait)
	}
	if m.clearednamespace {
		edges = append(edges, events.EdgeNamespace)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventsMutation) EdgeCleared(name string) bool {
	switch name {
	case events.EdgeWfeventswait:
		return m.clearedwfeventswait
	case events.EdgeNamespace:
		return m.clearednamespace
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventsMutation) ClearEdge(name string) error {
	switch name {
	case events.EdgeNamespace:
		m.ClearNamespace()
		return nil
	}
	return fmt.Errorf("unknown Events unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventsMutation) ResetEdge(name string) error {
	switch name {
	case events.EdgeWfeventswait:
		m.ResetWfeventswait()
		return nil
	case events.EdgeNamespace:
		m.ResetNamespace()
		return nil
	}
	return fmt.Errorf("unknown Events edge %s", name)
}

// EventsWaitMutation represents an operation that mutates the EventsWait nodes in the graph.
type EventsWaitMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	events               *map[string]interface{}
	clearedFields        map[string]struct{}
	workflowevent        *uuid.UUID
	clearedworkflowevent bool
	done                 bool
	oldValue             func(context.Context) (*EventsWait, error)
	predicates           []predicate.EventsWait
}

var _ ent.Mutation = (*EventsWaitMutation)(nil)

// eventswaitOption allows management of the mutation configuration using functional options.
type eventswaitOption func(*EventsWaitMutation)

// newEventsWaitMutation creates new mutation for the EventsWait entity.
func newEventsWaitMutation(c config, op Op, opts ...eventswaitOption) *EventsWaitMutation {
	m := &EventsWaitMutation{
		config:        c,
		op:            op,
		typ:           TypeEventsWait,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventsWaitID sets the ID field of the mutation.
func withEventsWaitID(id uuid.UUID) eventswaitOption {
	return func(m *EventsWaitMutation) {
		var (
			err   error
			once  sync.Once
			value *EventsWait
		)
		m.oldValue = func(ctx context.Context) (*EventsWait, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EventsWait.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEventsWait sets the old EventsWait of the mutation.
func withEventsWait(node *EventsWait) eventswaitOption {
	return func(m *EventsWaitMutation) {
		m.oldValue = func(context.Context) (*EventsWait, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventsWaitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventsWaitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EventsWait entities.
func (m *EventsWaitMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventsWaitMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventsWaitMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EventsWait.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEvents sets the "events" field.
func (m *EventsWaitMutation) SetEvents(value map[string]interface{}) {
	m.events = &value
}

// Events returns the value of the "events" field in the mutation.
func (m *EventsWaitMutation) Events() (r map[string]interface{}, exists bool) {
	v := m.events
	if v == nil {
		return
	}
	return *v, true
}

// OldEvents returns the old "events" field's value of the EventsWait entity.
// If the EventsWait object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsWaitMutation) OldEvents(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvents is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvents requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvents: %w", err)
	}
	return oldValue.Events, nil
}

// ResetEvents resets all changes to the "events" field.
func (m *EventsWaitMutation) ResetEvents() {
	m.events = nil
}

// SetWorkfloweventID sets the "workflowevent" edge to the Events entity by id.
func (m *EventsWaitMutation) SetWorkfloweventID(id uuid.UUID) {
	m.workflowevent = &id
}

// ClearWorkflowevent clears the "workflowevent" edge to the Events entity.
func (m *EventsWaitMutation) ClearWorkflowevent() {
	m.clearedworkflowevent = true
}

// WorkfloweventCleared reports if the "workflowevent" edge to the Events entity was cleared.
func (m *EventsWaitMutation) WorkfloweventCleared() bool {
	return m.clearedworkflowevent
}

// WorkfloweventID returns the "workflowevent" edge ID in the mutation.
func (m *EventsWaitMutation) WorkfloweventID() (id uuid.UUID, exists bool) {
	if m.workflowevent != nil {
		return *m.workflowevent, true
	}
	return
}

// WorkfloweventIDs returns the "workflowevent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkfloweventID instead. It exists only for internal usage by the builders.
func (m *EventsWaitMutation) WorkfloweventIDs() (ids []uuid.UUID) {
	if id := m.workflowevent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkflowevent resets all changes to the "workflowevent" edge.
func (m *EventsWaitMutation) ResetWorkflowevent() {
	m.workflowevent = nil
	m.clearedworkflowevent = false
}

// Where appends a list predicates to the EventsWaitMutation builder.
func (m *EventsWaitMutation) Where(ps ...predicate.EventsWait) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventsWaitMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventsWaitMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EventsWait, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventsWaitMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventsWaitMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EventsWait).
func (m *EventsWaitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventsWaitMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.events != nil {
		fields = append(fields, eventswait.FieldEvents)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventsWaitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case eventswait.FieldEvents:
		return m.Events()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventsWaitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case eventswait.FieldEvents:
		return m.OldEvents(ctx)
	}
	return nil, fmt.Errorf("unknown EventsWait field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventsWaitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case eventswait.FieldEvents:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvents(v)
		return nil
	}
	return fmt.Errorf("unknown EventsWait field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventsWaitMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventsWaitMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventsWaitMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EventsWait numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventsWaitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventsWaitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventsWaitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EventsWait nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventsWaitMutation) ResetField(name string) error {
	switch name {
	case eventswait.FieldEvents:
		m.ResetEvents()
		return nil
	}
	return fmt.Errorf("unknown EventsWait field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventsWaitMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.workflowevent != nil {
		edges = append(edges, eventswait.EdgeWorkflowevent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventsWaitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case eventswait.EdgeWorkflowevent:
		if id := m.workflowevent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventsWaitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventsWaitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventsWaitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedworkflowevent {
		edges = append(edges, eventswait.EdgeWorkflowevent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventsWaitMutation) EdgeCleared(name string) bool {
	switch name {
	case eventswait.EdgeWorkflowevent:
		return m.clearedworkflowevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventsWaitMutation) ClearEdge(name string) error {
	switch name {
	case eventswait.EdgeWorkflowevent:
		m.ClearWorkflowevent()
		return nil
	}
	return fmt.Errorf("unknown EventsWait unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventsWaitMutation) ResetEdge(name string) error {
	switch name {
	case eventswait.EdgeWorkflowevent:
		m.ResetWorkflowevent()
		return nil
	}
	return fmt.Errorf("unknown EventsWait edge %s", name)
}

// NamespaceMutation represents an operation that mutates the Namespace nodes in the graph.
type NamespaceMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	created_at                *time.Time
	updated_at                *time.Time
	_config                   *string
	name                      *string
	clearedFields             map[string]struct{}
	cloudevents               map[uuid.UUID]struct{}
	removedcloudevents        map[uuid.UUID]struct{}
	clearedcloudevents        bool
	namespacelisteners        map[uuid.UUID]struct{}
	removednamespacelisteners map[uuid.UUID]struct{}
	clearednamespacelisteners bool
	cloudeventfilters         map[int]struct{}
	removedcloudeventfilters  map[int]struct{}
	clearedcloudeventfilters  bool
	done                      bool
	oldValue                  func(context.Context) (*Namespace, error)
	predicates                []predicate.Namespace
}

var _ ent.Mutation = (*NamespaceMutation)(nil)

// namespaceOption allows management of the mutation configuration using functional options.
type namespaceOption func(*NamespaceMutation)

// newNamespaceMutation creates new mutation for the Namespace entity.
func newNamespaceMutation(c config, op Op, opts ...namespaceOption) *NamespaceMutation {
	m := &NamespaceMutation{
		config:        c,
		op:            op,
		typ:           TypeNamespace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNamespaceID sets the ID field of the mutation.
func withNamespaceID(id uuid.UUID) namespaceOption {
	return func(m *NamespaceMutation) {
		var (
			err   error
			once  sync.Once
			value *Namespace
		)
		m.oldValue = func(ctx context.Context) (*Namespace, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Namespace.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNamespace sets the old Namespace of the mutation.
func withNamespace(node *Namespace) namespaceOption {
	return func(m *NamespaceMutation) {
		m.oldValue = func(context.Context) (*Namespace, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NamespaceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NamespaceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Namespace entities.
func (m *NamespaceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NamespaceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NamespaceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Namespace.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NamespaceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NamespaceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Namespace entity.
// If the Namespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NamespaceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NamespaceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NamespaceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NamespaceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Namespace entity.
// If the Namespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NamespaceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NamespaceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetConfig sets the "config" field.
func (m *NamespaceMutation) SetConfig(s string) {
	m._config = &s
}

// Config returns the value of the "config" field in the mutation.
func (m *NamespaceMutation) Config() (r string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the Namespace entity.
// If the Namespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NamespaceMutation) OldConfig(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *NamespaceMutation) ResetConfig() {
	m._config = nil
}

// SetName sets the "name" field.
func (m *NamespaceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *NamespaceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Namespace entity.
// If the Namespace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NamespaceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *NamespaceMutation) ResetName() {
	m.name = nil
}

// AddCloudeventIDs adds the "cloudevents" edge to the CloudEvents entity by ids.
func (m *NamespaceMutation) AddCloudeventIDs(ids ...uuid.UUID) {
	if m.cloudevents == nil {
		m.cloudevents = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.cloudevents[ids[i]] = struct{}{}
	}
}

// ClearCloudevents clears the "cloudevents" edge to the CloudEvents entity.
func (m *NamespaceMutation) ClearCloudevents() {
	m.clearedcloudevents = true
}

// CloudeventsCleared reports if the "cloudevents" edge to the CloudEvents entity was cleared.
func (m *NamespaceMutation) CloudeventsCleared() bool {
	return m.clearedcloudevents
}

// RemoveCloudeventIDs removes the "cloudevents" edge to the CloudEvents entity by IDs.
func (m *NamespaceMutation) RemoveCloudeventIDs(ids ...uuid.UUID) {
	if m.removedcloudevents == nil {
		m.removedcloudevents = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.cloudevents, ids[i])
		m.removedcloudevents[ids[i]] = struct{}{}
	}
}

// RemovedCloudevents returns the removed IDs of the "cloudevents" edge to the CloudEvents entity.
func (m *NamespaceMutation) RemovedCloudeventsIDs() (ids []uuid.UUID) {
	for id := range m.removedcloudevents {
		ids = append(ids, id)
	}
	return
}

// CloudeventsIDs returns the "cloudevents" edge IDs in the mutation.
func (m *NamespaceMutation) CloudeventsIDs() (ids []uuid.UUID) {
	for id := range m.cloudevents {
		ids = append(ids, id)
	}
	return
}

// ResetCloudevents resets all changes to the "cloudevents" edge.
func (m *NamespaceMutation) ResetCloudevents() {
	m.cloudevents = nil
	m.clearedcloudevents = false
	m.removedcloudevents = nil
}

// AddNamespacelistenerIDs adds the "namespacelisteners" edge to the Events entity by ids.
func (m *NamespaceMutation) AddNamespacelistenerIDs(ids ...uuid.UUID) {
	if m.namespacelisteners == nil {
		m.namespacelisteners = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.namespacelisteners[ids[i]] = struct{}{}
	}
}

// ClearNamespacelisteners clears the "namespacelisteners" edge to the Events entity.
func (m *NamespaceMutation) ClearNamespacelisteners() {
	m.clearednamespacelisteners = true
}

// NamespacelistenersCleared reports if the "namespacelisteners" edge to the Events entity was cleared.
func (m *NamespaceMutation) NamespacelistenersCleared() bool {
	return m.clearednamespacelisteners
}

// RemoveNamespacelistenerIDs removes the "namespacelisteners" edge to the Events entity by IDs.
func (m *NamespaceMutation) RemoveNamespacelistenerIDs(ids ...uuid.UUID) {
	if m.removednamespacelisteners == nil {
		m.removednamespacelisteners = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.namespacelisteners, ids[i])
		m.removednamespacelisteners[ids[i]] = struct{}{}
	}
}

// RemovedNamespacelisteners returns the removed IDs of the "namespacelisteners" edge to the Events entity.
func (m *NamespaceMutation) RemovedNamespacelistenersIDs() (ids []uuid.UUID) {
	for id := range m.removednamespacelisteners {
		ids = append(ids, id)
	}
	return
}

// NamespacelistenersIDs returns the "namespacelisteners" edge IDs in the mutation.
func (m *NamespaceMutation) NamespacelistenersIDs() (ids []uuid.UUID) {
	for id := range m.namespacelisteners {
		ids = append(ids, id)
	}
	return
}

// ResetNamespacelisteners resets all changes to the "namespacelisteners" edge.
func (m *NamespaceMutation) ResetNamespacelisteners() {
	m.namespacelisteners = nil
	m.clearednamespacelisteners = false
	m.removednamespacelisteners = nil
}

// AddCloudeventfilterIDs adds the "cloudeventfilters" edge to the CloudEventFilters entity by ids.
func (m *NamespaceMutation) AddCloudeventfilterIDs(ids ...int) {
	if m.cloudeventfilters == nil {
		m.cloudeventfilters = make(map[int]struct{})
	}
	for i := range ids {
		m.cloudeventfilters[ids[i]] = struct{}{}
	}
}

// ClearCloudeventfilters clears the "cloudeventfilters" edge to the CloudEventFilters entity.
func (m *NamespaceMutation) ClearCloudeventfilters() {
	m.clearedcloudeventfilters = true
}

// CloudeventfiltersCleared reports if the "cloudeventfilters" edge to the CloudEventFilters entity was cleared.
func (m *NamespaceMutation) CloudeventfiltersCleared() bool {
	return m.clearedcloudeventfilters
}

// RemoveCloudeventfilterIDs removes the "cloudeventfilters" edge to the CloudEventFilters entity by IDs.
func (m *NamespaceMutation) RemoveCloudeventfilterIDs(ids ...int) {
	if m.removedcloudeventfilters == nil {
		m.removedcloudeventfilters = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.cloudeventfilters, ids[i])
		m.removedcloudeventfilters[ids[i]] = struct{}{}
	}
}

// RemovedCloudeventfilters returns the removed IDs of the "cloudeventfilters" edge to the CloudEventFilters entity.
func (m *NamespaceMutation) RemovedCloudeventfiltersIDs() (ids []int) {
	for id := range m.removedcloudeventfilters {
		ids = append(ids, id)
	}
	return
}

// CloudeventfiltersIDs returns the "cloudeventfilters" edge IDs in the mutation.
func (m *NamespaceMutation) CloudeventfiltersIDs() (ids []int) {
	for id := range m.cloudeventfilters {
		ids = append(ids, id)
	}
	return
}

// ResetCloudeventfilters resets all changes to the "cloudeventfilters" edge.
func (m *NamespaceMutation) ResetCloudeventfilters() {
	m.cloudeventfilters = nil
	m.clearedcloudeventfilters = false
	m.removedcloudeventfilters = nil
}

// Where appends a list predicates to the NamespaceMutation builder.
func (m *NamespaceMutation) Where(ps ...predicate.Namespace) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NamespaceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NamespaceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Namespace, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NamespaceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NamespaceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Namespace).
func (m *NamespaceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NamespaceMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, namespace.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, namespace.FieldUpdatedAt)
	}
	if m._config != nil {
		fields = append(fields, namespace.FieldConfig)
	}
	if m.name != nil {
		fields = append(fields, namespace.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NamespaceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case namespace.FieldCreatedAt:
		return m.CreatedAt()
	case namespace.FieldUpdatedAt:
		return m.UpdatedAt()
	case namespace.FieldConfig:
		return m.Config()
	case namespace.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NamespaceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case namespace.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case namespace.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case namespace.FieldConfig:
		return m.OldConfig(ctx)
	case namespace.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Namespace field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NamespaceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case namespace.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case namespace.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case namespace.FieldConfig:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	case namespace.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Namespace field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NamespaceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NamespaceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NamespaceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Namespace numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NamespaceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NamespaceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NamespaceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Namespace nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NamespaceMutation) ResetField(name string) error {
	switch name {
	case namespace.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case namespace.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case namespace.FieldConfig:
		m.ResetConfig()
		return nil
	case namespace.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Namespace field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NamespaceMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cloudevents != nil {
		edges = append(edges, namespace.EdgeCloudevents)
	}
	if m.namespacelisteners != nil {
		edges = append(edges, namespace.EdgeNamespacelisteners)
	}
	if m.cloudeventfilters != nil {
		edges = append(edges, namespace.EdgeCloudeventfilters)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NamespaceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case namespace.EdgeCloudevents:
		ids := make([]ent.Value, 0, len(m.cloudevents))
		for id := range m.cloudevents {
			ids = append(ids, id)
		}
		return ids
	case namespace.EdgeNamespacelisteners:
		ids := make([]ent.Value, 0, len(m.namespacelisteners))
		for id := range m.namespacelisteners {
			ids = append(ids, id)
		}
		return ids
	case namespace.EdgeCloudeventfilters:
		ids := make([]ent.Value, 0, len(m.cloudeventfilters))
		for id := range m.cloudeventfilters {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NamespaceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedcloudevents != nil {
		edges = append(edges, namespace.EdgeCloudevents)
	}
	if m.removednamespacelisteners != nil {
		edges = append(edges, namespace.EdgeNamespacelisteners)
	}
	if m.removedcloudeventfilters != nil {
		edges = append(edges, namespace.EdgeCloudeventfilters)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NamespaceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case namespace.EdgeCloudevents:
		ids := make([]ent.Value, 0, len(m.removedcloudevents))
		for id := range m.removedcloudevents {
			ids = append(ids, id)
		}
		return ids
	case namespace.EdgeNamespacelisteners:
		ids := make([]ent.Value, 0, len(m.removednamespacelisteners))
		for id := range m.removednamespacelisteners {
			ids = append(ids, id)
		}
		return ids
	case namespace.EdgeCloudeventfilters:
		ids := make([]ent.Value, 0, len(m.removedcloudeventfilters))
		for id := range m.removedcloudeventfilters {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NamespaceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcloudevents {
		edges = append(edges, namespace.EdgeCloudevents)
	}
	if m.clearednamespacelisteners {
		edges = append(edges, namespace.EdgeNamespacelisteners)
	}
	if m.clearedcloudeventfilters {
		edges = append(edges, namespace.EdgeCloudeventfilters)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NamespaceMutation) EdgeCleared(name string) bool {
	switch name {
	case namespace.EdgeCloudevents:
		return m.clearedcloudevents
	case namespace.EdgeNamespacelisteners:
		return m.clearednamespacelisteners
	case namespace.EdgeCloudeventfilters:
		return m.clearedcloudeventfilters
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NamespaceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Namespace unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NamespaceMutation) ResetEdge(name string) error {
	switch name {
	case namespace.EdgeCloudevents:
		m.ResetCloudevents()
		return nil
	case namespace.EdgeNamespacelisteners:
		m.ResetNamespacelisteners()
		return nil
	case namespace.EdgeCloudeventfilters:
		m.ResetCloudeventfilters()
		return nil
	}
	return fmt.Errorf("unknown Namespace edge %s", name)
}
