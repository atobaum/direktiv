// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/schema"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	namespaceFields := schema.Namespace{}.Fields()
	_ = namespaceFields
	// namespaceDescCreatedAt is the schema descriptor for created_at field.
	namespaceDescCreatedAt := namespaceFields[1].Descriptor()
	// namespace.DefaultCreatedAt holds the default value on creation for the created_at field.
	namespace.DefaultCreatedAt = namespaceDescCreatedAt.Default.(func() time.Time)
	// namespaceDescUpdatedAt is the schema descriptor for updated_at field.
	namespaceDescUpdatedAt := namespaceFields[2].Descriptor()
	// namespace.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	namespace.DefaultUpdatedAt = namespaceDescUpdatedAt.Default.(func() time.Time)
	// namespace.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	namespace.UpdateDefaultUpdatedAt = namespaceDescUpdatedAt.UpdateDefault.(func() time.Time)
	// namespaceDescConfig is the schema descriptor for config field.
	namespaceDescConfig := namespaceFields[3].Descriptor()
	// namespace.DefaultConfig holds the default value on creation for the config field.
	namespace.DefaultConfig = namespaceDescConfig.Default.(string)
	// namespaceDescName is the schema descriptor for name field.
	namespaceDescName := namespaceFields[4].Descriptor()
	// namespace.NameValidator is a validator for the "name" field. It is called by the builders before save.
	namespace.NameValidator = func() func(string) error {
		validators := namespaceDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// namespaceDescID is the schema descriptor for id field.
	namespaceDescID := namespaceFields[0].Descriptor()
	// namespace.DefaultID holds the default value on creation for the id field.
	namespace.DefaultID = namespaceDescID.Default.(func() uuid.UUID)
}
